# -*- coding: utf-8 -*-
"""Movie_Recomendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WJZghLAEjHNqDrzOnMoLSIt8scHM4qM
"""

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import random
import pickle

data_path = 'C:\\Ki_4\\AIL303\\AIL-Thuc hanh\\Practice\\prac_g2\\Final_dataset_in_here!!!!!\\100k_final_dataset.csv'
matrix_path = 'C:\\Ki_4\\AIL303\\AIL-Thuc hanh\\Practice\\prac_g2\\Final_dataset_in_here!!!!!\\userId_movieId_matrix.pkl'

rating_df = pd.read_csv(data_path)
with open(matrix_path, 'rb') as f:
    users_movies_matrix = pickle.load(f)

def get_popular_top_rated_movies(rating_df, n_recommend=10):
    """
    Lấy ra N phim vừa phổ biến (nhiều lượt rating) vừa có rating trung bình cao.

    Args:
        rating_df (DataFrame): DataFrame chứa thông tin ratings.
        n_recommend (int): Số lượng phim cần trả về.

    Returns:
        pd.DataFrame: DataFrame chứa thông tin các phim được gợi ý.
    """
    # 1. Tính toán rating trung bình và số lượt rating cho mỗi phim
    movie_stats = rating_df.groupby('movieId').agg(
        avg_rating=('rating', 'mean'),
        rating_count=('rating', 'count')
    ).reset_index()

    # 2. Lọc nhiễu: Chỉ xem xét những phim có số lượt rating cao hơn 90% các phim khác
    # Điều này để tránh trường hợp một phim chỉ có 1 rating 5.0 lại đứng top 1.
    min_ratings_threshold = movie_stats['rating_count'].quantile(0.90)
    qualified_movies = movie_stats[movie_stats['rating_count'] >= min_ratings_threshold]

    # 3. Sắp xếp các phim đủ điều kiện theo rating trung bình giảm dần
    qualified_movies = qualified_movies.sort_values('avg_rating', ascending=False)

    # 4. Lấy thông tin chi tiết của top N phim
    top_movie_ids = qualified_movies.head(n_recommend)['movieId']

    # Lấy thông tin đầy đủ (title, poster,...) của các phim này
    top_movies_info = rating_df[rating_df['movieId'].isin(top_movie_ids)][['movieId', 'title', 'genres', 'poster_link']].drop_duplicates(subset=['movieId'])

    # Sắp xếp lại theo đúng thứ tự của qualified_movies
    top_movies_info = top_movies_info.set_index('movieId').loc[top_movie_ids].reset_index()

    return top_movies_info

def create_new_user_vector(user_id, movie_ratings, users_movies_matrix):
    """
    Tạo vector rating cho người dùng mới dựa trên userId và rating 5 bộ phim.

    Args:
        user_id (int): ID của người dùng mới.
        movie_ratings (dict): Dictionary chứa movieId và rating.
        users_movies_matrix (DataFrame): Ma trận user-movie.
    Returns:
        pd.Series: Vector rating đầy đủ của người dùng mới.
    """
    all_movie_ids = users_movies_matrix.columns
    new_user_vector = pd.Series(0, index=all_movie_ids, name=user_id)
    for movie_id, rating in movie_ratings.items():
        if movie_id in all_movie_ids:
            new_user_vector[movie_id] = rating
    return new_user_vector

def find_top_similar_users(new_user_vector, users_movies_matrix, k=5):
    """
    Tìm top k user tương đồng nhất với người dùng mới.

    Args:
        new_user_vector (pd.Series): Vector rating của người dùng mới.
        users_movies_matrix (DataFrame): Ma trận user-movie.
        k (int): Số user tương đồng cần tìm. Mặc định là 5.

    Returns:
        list: Danh sách userId của top k user tương đồng.
    """
    sim_scores = cosine_similarity([new_user_vector], users_movies_matrix)[0]
    sim_df = pd.Series(sim_scores, index=users_movies_matrix.index)
    top_users = sim_df.nlargest(k + 1).index[1:]
    return top_users.tolist()

def recommend_movies_for_new_user(user_id, movie_ratings, users_movies_matrix, rating_df, k=5, n_recommend=8):
    """
    Gợi ý 8 phim dựa trên rating của 5 bộ phim và top 5 user tương đồng.
    Args:
        user_id (int): ID của người dùng mới.
        movie_ratings (dict): Dictionary chứa movieId và rating của 5 bộ phim.
        users_movies_matrix (DataFrame): Ma trận user-movie.
        rating_df (DataFrame): DataFrame chứa thông tin phim.
        k (int): Số user tương đồng cần tìm. Mặc định là 5.
        n_recommend (int): Số phim gợi ý. Mặc định là 8.

    Returns:
        list: Danh sách dictionary chứa thông tin 8 phim gợi ý.
    """
    new_user_vector = create_new_user_vector(user_id, movie_ratings, users_movies_matrix)
    top_k_userId = find_top_similar_users(new_user_vector, users_movies_matrix, k)

    top_users_ratings = users_movies_matrix.loc[top_k_userId]
    rated_movies_by_neighbors = top_users_ratings.columns[top_users_ratings.ne(0).any()]
    movies_rated_by_new_user = movie_ratings.keys()
    potential_recommendations = rated_movies_by_neighbors.drop(movies_rated_by_new_user, errors='ignore')
    if potential_recommendations.empty:
        return get_popular_top_rated_movies(rating_df, n_recommend=n_recommend).to_dict(orient='records')

    total_ratings = top_users_ratings[potential_recommendations].sum()
    top_movie_ids = total_ratings.nlargest(min(n_recommend, len(potential_recommendations))).index

    if len(top_movie_ids) < n_recommend:
          popular_movies_df = get_popular_top_rated_movies(rating_df, n_recommend=20)
          seen_movie_ids = list(top_movie_ids) + list(movies_rated_by_new_user)
          additional_movies = popular_movies_df[~popular_movies_df['movieId'].isin(seen_movie_ids)]

          num_needed = n_recommend - len(top_movie_ids)
          print(f"So luong phim con thieu: {num_needed}")
          additional_movie_ids = additional_movies.head(num_needed)['movieId'].values

          top_movie_ids = list(top_movie_ids) + list(additional_movie_ids)
    recommended_movies_info  = rating_df[rating_df['movieId'].isin(top_movie_ids[:n_recommend])][['movieId', 'title', 'genres','imdb', 'poster_link']].drop_duplicates(subset=['movieId'])

    return recommended_movies_info .to_dict(orient='records')

# Giả lập dữ liệu từ web: userId và rating cho 5 bộ phim
user_id = 10000000000
movie_ratings = {
    26479: 4,    # Pirates of Penzance
    247150: 3,  # Stowaway
    7451: 4,  # Mean Girls
    61132: 4,  # Tropic Thunder
    96079: 3   # Skyfall
}

recommendations = recommend_movies_for_new_user(user_id, movie_ratings, users_movies_matrix, rating_df)
df_re = pd.DataFrame(recommendations)
df_re
